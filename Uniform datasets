import pandas as pd
import numpy as np

# Function to process a single CSV file
def process_csv(file_path, output_path):
    df = pd.read_csv(file_path, header=None)

    num_kp = 50  # Number of keypoints to keep
    kp_size = 5  # Each keypoint consists of 5 values

    # Process each row
    processed_rows = []
    for _, row in df.iterrows():
        row_values = row.values

        # Reshape to (num_kp_available, 5)
        num_kp_available = len(row_values) // kp_size
        reshaped = row_values[:num_kp_available * kp_size].reshape(-1, kp_size)

        # If we have more than 50 keypoints, truncate
        if num_kp_available >= num_kp:
            truncated = reshaped[:num_kp]
        else:
            # Calculate per-column averages
            avg_values = np.mean(reshaped, axis=0) if num_kp_available > 0 else np.zeros(kp_size)
            
            # Fill missing rows with average values
            missing_rows = num_kp - num_kp_available
            fill_values = np.tile(avg_values, (missing_rows, 1))
            truncated = np.vstack((reshaped, fill_values))
        
        # Normalize each descriptor column
        for col in range(kp_size):
            # Extract all values for this descriptor
            col_data = truncated[:, col]
            
            # Calculate mean and std for this descriptor
            mean_val = np.mean(col_data)
            std_val = np.std(col_data)
            
            # Avoid division by zero
            std_val = std_val if std_val != 0 else 1
            
            # Normalize the descriptor column
            truncated[:, col] = (col_data - mean_val) / std_val

        # Flatten and add to processed rows
        processed_rows.append(truncated.flatten())

    # Convert to DataFrame
    processed_df = pd.DataFrame(processed_rows)
    
    # Generate column labels
    column_labels = []
    for i in range(1, num_kp + 1):
        column_labels.extend([f"kp{i}_x", f"kp{i}_y", f"greyscalevalue{i}", f"kpopticalflow{i}_x", f"kpopticalflow{i}_y"])
    
    processed_df.columns = column_labels
    
    # Save to CSV
    processed_df.to_csv(output_path, index=False)

# List of input and output files
input_files = {
    "holdout_advanced_features.csv": "processed_holdout_advanced_features.csv",
    "holdout_beginner_features.csv": "processed_holdout_beginner_features.csv",
    "train_advanced_features.csv": "processed_train_advanced_features.csv",
    "train_beginner_features.csv": "processed_train_beginner_features.csv"
}

# Process each file separately
for input_file, output_file in input_files.items():
    process_csv(input_file, output_file)
    print(f"Processed {input_file} -> {output_file}")
