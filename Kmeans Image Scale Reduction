import cv2
import numpy as np
import matplotlib.pyplot as plt
from azure.storage.blob import BlobServiceClient
from sklearn.cluster import KMeans
import os
from io import BytesIO

# -------------------------------------------------
# Azure Blob Storage Settings & Connection
# -------------------------------------------------
account_name = 'cvpiano1'
image_container = 'cs229beginnerimagesequencesbatch1'
connect_str = (
    'DefaultEndpointsProtocol=https;AccountName=cvpiano1;'
    'AccountKey=qVT8KKSkYiKw1xFw/Bbo3mW3V8h0wwKv3JzeyjLHBRAV3vDFz/UaVUsXg4P3b55+mqpn44MoN6Hc+AStAVMZPQ==;'
    'EndpointSuffix=core.windows.net'
)

try:
    blob_service_client = BlobServiceClient.from_connection_string(connect_str)
    image_container_client = blob_service_client.get_container_client(image_container)
    print("Connected to Azure Blob Storage container:", image_container)
except Exception as e:
    print("Error connecting to Azure Blob Storage:", e)
    exit()

# -------------------------------------------------
# Retrieve and sort all image files from the container
# -------------------------------------------------
blob_list = [blob.name for blob in image_container_client.list_blobs() 
             if blob.name.lower().endswith('.jpg')]
print(f"Found {len(blob_list)} JPEG blobs in container '{image_container}'.")
blob_list.sort()

# -------------------------------------------------
# Load and preprocess all images
# -------------------------------------------------
all_pixels = []
image_shapes = []

for blob_name in blob_list:
    blob_client = image_container_client.get_blob_client(blob_name)
    blob_data = blob_client.download_blob().readall()
    
    # Read image from Azure blob as a numpy array
    image_array = np.asarray(bytearray(blob_data), dtype=np.uint8)
    image = cv2.imdecode(image_array, cv2.IMREAD_COLOR)  # Read as BGR

    if image is None:
        print(f"Skipping corrupted image: {blob_name}")
        continue

    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert to RGB
    image_shapes.append(image.shape)  # Store shape for reconstruction
    
    # Reshape image to a 2D array of pixels
    pixels = image.reshape(-1, 3)
    all_pixels.append(pixels)

# Stack all pixels from all images
all_pixels = np.vstack(all_pixels)

# -------------------------------------------------
# Run K-Means on all pixels together
# -------------------------------------------------
num_clusters = 16  # Adjust this as needed
print("[INFO] Running K-Means clustering...")

kmeans = KMeans(n_clusters=num_clusters, random_state=42, n_init=10)
kmeans.fit(all_pixels)

centroids = kmeans.cluster_centers_
labels = kmeans.labels_

# -------------------------------------------------
# Reconstruct compressed images
# -------------------------------------------------
start_idx = 0
compressed_images = []

for shape in image_shapes:
    num_pixels = shape[0] * shape[1]
    compressed_pixels = centroids[labels[start_idx:start_idx + num_pixels]]
    compressed_image = compressed_pixels.reshape(shape)
    compressed_images.append(compressed_image.astype(np.uint8))
    start_idx += num_pixels

# -------------------------------------------------
# Save and visualize compressed images
# -------------------------------------------------
for idx, (blob_name, compressed_image) in enumerate(zip(blob_list, compressed_images)):
    plt.figure(figsize=(5, 5))
    plt.imshow(compressed_image)
    plt.title(f"Compressed Image {idx+1}")
    plt.axis("off")
    
    save_path = os.path.join(".", f"compressed_{os.path.basename(blob_name)}")
    plt.imsave(save_path, compressed_image)

print("[INFO] Image compression complete!")
